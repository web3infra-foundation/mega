//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "mega_issue")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    #[sea_orm(unique)]
    pub link: String,
    pub title: String,
    pub status: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub closed_at: Option<DateTime>,
    pub user_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Label,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Label => Entity::has_many(super::item_labels::Entity).into(),
        }
    }
}

impl Related<super::label::Entity> for Entity {
    fn to() -> RelationDef {
        super::item_labels::Relation::Label.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::item_labels::Relation::MegaIssue.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
