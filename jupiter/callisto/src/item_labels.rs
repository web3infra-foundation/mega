//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "item_labels")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub item_id: i64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub label_id: i64,
    pub item_type: String,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    MegaIssue,
    MegaMr,
    Label
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::MegaIssue => Entity::belongs_to(super::mega_issue::Entity)
                .from(Column::ItemId)
                .to(super::mega_issue::Column::Id)
                .into(),
            Self::MegaMr => Entity::belongs_to(super::mega_mr::Entity)
                .from(Column::ItemId)
                .to(super::mega_mr::Column::Id)
                .into(),
            Self::Label => Entity::belongs_to(super::label::Entity)
                .from(Column::LabelId)
                .to(super::label::Column::Id)
                .into(),
        }
    }
}

impl Related<super::label::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Label.def()
    }
}

impl Related<super::mega_issue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MegaIssue.def()
    }
}

impl Related<super::mega_mr::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MegaMr.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
