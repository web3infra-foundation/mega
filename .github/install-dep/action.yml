name: 'Install Dependencies'
description: 'Install dependencies with caching support'

inputs:
  cache-key:
    description: 'Cache key for dependencies'
    required: true
  platform:
    description: 'Platform (ubuntu-latest, windows-latest, macos-latest)'
    required: true
  use-gtk:
    description: 'Whether download and setup GTK libs (true, false)'
    required: false
    default: 'true'
  self-hosted:
    description: 'Whether this action is running on a self-hosted runner (true, false)'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # ================= Linux Only Cache Restore =================
    - name: Restore dependencies (Linux Only)
      if: contains(inputs.platform, 'ubuntu')
      id: cache-restore-linux
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/apt-archives
          ~/.cache/pip
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ inputs.platform }}-sysdeps-${{ inputs.cache-key }}
        restore-keys: |
          ${{ inputs.platform }}-sysdeps-

    # ================ Platform-specific Initialization (Linux) ================
    - name: Install dependencies (Ubuntu)
      if: contains(inputs.platform, 'ubuntu')
      shell: bash
      run: |
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
        # 检查并安装缺失的包
        PACKAGES="cmake git git-lfs build-essential pkg-config curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev libgtk-4-dev libadwaita-1-0 libadwaita-1-dev libgtksourceview-5-dev libwebkit2gtk-4.1-dev fuse3 libfuse3-dev"
        MISSING_PACKAGES=""
        
        for pkg in $PACKAGES; do
          if ! dpkg -l | grep -q "^ii  $pkg "; then
            MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
          fi
        done
        
        if [ -n "$MISSING_PACKAGES" ]; then
          echo "Installing missing packages: $MISSING_PACKAGES"
          sudo apt update
          sudo apt install -y $MISSING_PACKAGES
        else
          echo "All required packages are already installed"
        fi
        
        # 创建用户缓存目录
        mkdir -p ~/.cache/apt-archives
        
        sudo apt update
        sudo apt install -y \
          cmake \
          git \
          git-lfs \
          build-essential \
          pkg-config \
          curl \
          wget \
          file \
          libssl-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libgtk-4-dev \
          libadwaita-1-0 \
          libadwaita-1-dev \
          libgtksourceview-5-dev \
          libwebkit2gtk-4.1-dev \
          fuse3 \
          libfuse3-dev

    # ================ Platform-specific Initialization (macOS) ================
    # macOS - 不使用缓存，直接安装
    - name: Install dependencies (macOS)
      if: contains(inputs.platform, 'macos')
      shell: bash
      run: |
        echo CMAKE_POLICY_VERSION_MINIMUM=3.10 >> $GITHUB_ENV
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
        brew install \
          gtk4 \
          libadwaita \
          librsvg \
          gtksourceview5

    # =============== Platform-specific Initialization (Windows) ===============
    # Windows - 不使用缓存，直接安装
    - name: Install dependencies (Windows)
      if: contains(inputs.platform, 'windows')
      shell: powershell
      run: |
        choco install --no-progress git-lfs pkgconfiglite ninja nasm
        pip install requests tqdm
        rustup update

    # Required by monobean, performing this step would take about 5s.
    - name: Load GTK and libadwaita
      if: contains(inputs.platform, 'windows') && inputs.use-gtk == 'true'
      shell: powershell
      run: python ./monobean/setup.py

    - name: Manually set env vars and export
      if: contains(inputs.platform, 'windows')
      shell: powershell
      run: |
        $env:Path = "$env:Path;${{ github.workspace }}\monobean\resources\lib\bin;C:\Program Files\NASM;C:\Program Files\CMake\bin"
        $env:OPENSSL_DIR = "C:\Program Files\OpenSSL\"
        $env:PKG_CONFIG_PATH = "$env:PKG_CONFIG_PATH;${{ github.workspace }}\monobean\resources\lib\lib\pkgconfig;C:\Program Files\PkgConfig\lib\pkgconfig"
        $env:LIB = "$env:LIB;${{ github.workspace }}\monobean\resources\lib\lib"
        $env:INCLUDE = "$env:INCLUDE;${{ github.workspace }}\monobean\resources\lib\include;${{ github.workspace }}\monobean\resources\lib\include\cairo;${{ github.workspace }}\monobean\resources\lib\include\glib-2.0;${{ github.workspace }}\monobean\resources\lib\include\gobject-introspection-1.0;${{ github.workspace }}\monobean\resources\lib\lib\glib-2.0\include"
        $env:AWS_LC_SYS_PREBUILT_NASM = 1
        $env:AWS_LC_SYS_C_STD = 11
        $exportVariables = @("Path", "OPENSSL_DIR", "OPENSSL_LIB_DIR", "PKG_CONFIG_PATH", "LIB", "INCLUDE", "AWS_LC_SYS_C_STD", "AWS_LC_SYS_PREBUILT_NASM")
        foreach ($var in $exportVariables) {
            if (Test-Path "Env:\$var") {
                "$var=$((Get-Item "Env:\$var").Value)" | Out-File -FilePath $env:GITHUB_ENV -Append
            }
        }

    # =============== Post Process ===============
    - name: Setup Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      if: ${{ ! contains(inputs.platform, 'windows') }}
      with:
        components: clippy rustfmt
        cache: false

    # ================ Linux Only Cache Save ================
    - name: Cache dependencies (Linux Only)
      if: contains(inputs.platform, 'ubuntu') && steps.cache-restore-linux.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.cache/apt-archives
          ~/.cache/pip
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ inputs.platform }}-sysdeps-${{ inputs.cache-key }}
