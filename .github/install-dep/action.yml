name: 'Install Dependencies'
description: 'Install dependencies with caching support'

inputs:
  cache-key:
    description: 'Cache key for dependencies'
    required: true
  platform:
    description: 'Platform (ubuntu-latest, windows-latest, macos-latest)'
    required: true
  use-gtk:
    description: 'Whether download and setup GTK libs (true, false)'
    required: false
    default: 'true'
  self-hosted:
    description: 'Whether this action is running on a self-hosted runner (true, false)'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # ================= Linux Only Cache Restore =================
    - name: Restore dependencies (Linux Only)
      if: contains(inputs.platform, 'ubuntu')
      id: cache-restore-linux
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/apt-archives
          ~/.cache/pip
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ inputs.platform }}-sysdeps-${{ inputs.cache-key }}
        restore-keys: |
          ${{ inputs.platform }}-sysdeps-

    # ================ Platform-specific Initialization (Linux) ================
    - name: Install dependencies (Ubuntu)
      if: contains(inputs.platform, 'ubuntu')
      shell: bash
      run: |
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

        PACKAGES="cmake git git-lfs build-essential pkg-config curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev libgtk-4-dev libadwaita-1-0 libadwaita-1-dev libgtksourceview-5-dev libwebkit2gtk-4.1-dev fuse3 libfuse3-dev nettle-dev"
        MISSING_PACKAGES=""

        for pkg in $PACKAGES; do
          if ! dpkg -l | grep -q "^ii  $pkg "; then
            MISSING_PACKAGES="$MISSING_PACKAGES $pkg"
          fi
        done

        if [ -n "$MISSING_PACKAGES" ]; then
          echo "Installing missing packages: $MISSING_PACKAGES"
          sudo apt update
          sudo apt install -y $MISSING_PACKAGES
        else
          echo "All required packages are already installed"
        fi

        mkdir -p ~/.cache/apt-archives
    # ================ Platform-specific Initialization (macOS) ================
    - name: Install dependencies (macOS)
      if: ${{ contains(inputs.platform, 'macos') }}  # 如果你没有 inputs.platform，可改为: ${{ runner.os == 'macOS' }}
      shell: bash
      env:
        HOMEBREW_NO_AUTO_UPDATE: "1"
        HOMEBREW_NO_INSTALL_CLEANUP: "1"
      run: |
        set -euo pipefail
        echo CMAKE_POLICY_VERSION_MINIMUM=3.10 >> "$GITHUB_ENV"
        echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

        # —— 可配置区域 ——
        DEFAULT_PACKAGES=(gtk4 libadwaita librsvg gtksourceview5)
        DO_UPDATE_ON_DEMAND=1
        TRY_RELINK=1
        # ————————

        if ! command -v brew >/dev/null 2>&1; then
          echo "::error::Homebrew 未安装。请在 self-hosted runner 上预装 Homebrew（或改为允许自动安装）"
          # 如需自动安装（自托管且允许），可取消注释：
          # NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # eval "$(/opt/homebrew/bin/brew shellenv || true)"
          exit 1
        fi

        # 目标包列表：如需从 inputs 传入，可在此处拼装
        PACKAGES=("${DEFAULT_PACKAGES[@]}")

        echo "==> Packages to verify: ${PACKAGES[*]:-<none>}"

        # 统计缺失包
        MISSING=()
        for pkg in "${PACKAGES[@]}"; do
          [[ -z "${pkg:-}" ]] && continue
          if ! brew list --formula --versions "$pkg" >/dev/null 2>&1; then
            MISSING+=("$pkg")
          fi
        done

        if [[ ${#MISSING[@]} -gt 0 ]]; then
          echo "==> Missing packages: ${MISSING[*]}"
          if [[ "$DO_UPDATE_ON_DEMAND" == "1" ]]; then
            echo "==> Running 'brew update' once because some packages are missing..."
            brew update
          fi
          brew install "${MISSING[@]}"
        else
          echo "✅ 所有必需的包均已安装。"
        fi

        # 可选 relink：仅在开启且确有包时执行
        if [[ "$TRY_RELINK" == "1" && ${#PACKAGES[@]} -gt 0 ]]; then
          echo "==> Checking for unlinked kegs (best-effort)..."
          UNLINKED=()
          for pkg in "${PACKAGES[@]}"; do
            [[ -z "${pkg:-}" ]] && continue
            if brew list --formula --versions "$pkg" >/dev/null 2>&1; then
              if brew info "$pkg" | grep -qi "keg-only"; then
                echo "   - $pkg is keg-only, skipping link."
                continue
              fi
              if ! brew --prefix "$pkg" >/dev/null 2>&1; then
                UNLINKED+=("$pkg")
              fi
            fi
          done

          if [[ ${#UNLINKED[@]} -gt 0 ]]; then
            echo "==> Relinking: ${UNLINKED[*]}"
            for p in "${UNLINKED[@]}"; do
              brew link --overwrite "$p" || true
            done
          else
            echo "✅ 无需 relink。"
          fi
        fi

        echo "==> Done."


    # =============== Platform-specific Initialization (Windows) ===============
    - name: Install dependencies (Windows)
      if: contains(inputs.platform, 'windows')
      shell: powershell
      run: |
        choco install --no-progress git-lfs pkgconfiglite ninja nasm
        pip install requests tqdm
        rustup update

    - uses: lukka/get-cmake@latest
      if: contains(inputs.platform, 'windows')

    - uses: ilammy/msvc-dev-cmd@v1
      if: contains(inputs.platform, 'windows')

    - name: Setup anew (or from cache) vcpkg (and does not build any package)
      if: contains(inputs.platform, 'windows')
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: 'b1b19307e2d2ec1eefbdb7ea069de7d4bcd31f01'
        runVcpkgInstall: true
        vcpkgJsonGlob: '**/vcpkg.json'

    # Required by monobean, performing this step would take about 5s.
    - name: Load GTK and libadwaita
      if: contains(inputs.platform, 'windows') && inputs.use-gtk == 'true'
      shell: powershell
      run: python ./monobean/setup.py

    - name: Manually set env vars and export
      if: contains(inputs.platform, 'windows')
      shell: powershell
      run: |
        ls ${{ github.workspace }}\vcpkg
        ls ${{ github.workspace }}\969f6665-88a2-4c98-938e-ca9259871fec\vcpkg_installed\
        $env:OPENSSL_DIR = "C:\Program Files\OpenSSL\"
        $env:PKG_CONFIG_PATH = "${{ github.workspace }}\969f6665-88a2-4c98-938e-ca9259871fec\vcpkg_installed\x64-windows\lib\pkgconfig;${{ github.workspace }}\monobean\resources\lib\lib\pkgconfig;C:\Program Files\PkgConfig\lib\pkgconfig"
        $env:Path = "$env:Path;${{ github.workspace }}\monobean\resources\lib\bin;C:\Program Files\NASM;C:\Program Files\CMake\bin"
        $env:LIB = "$env:LIB;${{ github.workspace }}\969f6665-88a2-4c98-938e-ca9259871fec\vcpkg_installed\x64-windows\lib;${{ github.workspace }}\monobean\resources\lib\lib"
        $env:INCLUDE = "$env:INCLUDE;${{ github.workspace }}\969f6665-88a2-4c98-938e-ca9259871fec\vcpkg_installedx64-windows\include;${{ github.workspace }}\monobean\resources\lib\include;${{ github.workspace }}\monobean\resources\lib\include\cairo;${{ github.workspace }}\monobean\resources\lib\include\glib-2.0;${{ github.workspace }}\monobean\resources\lib\include\gobject-introspection-1.0;${{ github.workspace }}\monobean\resources\lib\lib\glib-2.0\include"

        $env:AWS_LC_SYS_PREBUILT_NASM = 1
        $env:AWS_LC_SYS_C_STD = 11

        $exportVariables = @("Path", "OPENSSL_DIR", "OPENSSL_LIB_DIR", "PKG_CONFIG_PATH", "LIB", "INCLUDE", "AWS_LC_SYS_C_STD", "AWS_LC_SYS_PREBUILT_NASM")
        foreach ($var in $exportVariables) {
            if (Test-Path "Env:\$var") {
                "$var=$((Get-Item "Env:\$var").Value)" | Out-File -FilePath $env:GITHUB_ENV -Append
            }
        }

    # =============== Post Process ===============
    - name: Setup Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      if: ${{ ! contains(inputs.platform, 'windows') }}
      with:
        components: clippy rustfmt
        cache: false

    # ================ Linux Only Cache Save ================
    - name: Cache dependencies (Linux Only)
      if: contains(inputs.platform, 'ubuntu') && steps.cache-restore-linux.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.cache/apt-archives
          ~/.cache/pip
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ inputs.platform }}-sysdeps-${{ inputs.cache-key }}
