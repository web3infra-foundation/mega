//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "crate_owners")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub crate_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub owner_id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub created_by: Option<i32>,
    pub deleted: bool,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key, auto_increment = false)]
    pub owner_kind: i32,
    pub email_notifications: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::crate_users::Entity",
        from = "Column::CreatedBy",
        to = "super::crate_users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CrateUsers,
    #[sea_orm(
        belongs_to = "super::crates::Entity",
        from = "Column::CrateId",
        to = "super::crates::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Crates,
}

impl Related<super::crate_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CrateUsers.def()
    }
}

impl Related<super::crates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Crates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
