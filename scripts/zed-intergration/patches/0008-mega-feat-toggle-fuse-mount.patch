From 8f8d3a30a45fa4f3b2359060d63a51f065c327d9 Mon Sep 17 00:00:00 2001
From: Neon <yyk1249501542@gmail.com>
Date: Tue, 29 Oct 2024 18:50:39 +0800
Subject: [PATCH 08/10] mega: feat toggle fuse mount

---
 Cargo.lock                                |   6 +-
 assets/settings/default.json              |  12 +++
 crates/mega/Cargo.toml                    |   5 +-
 crates/mega/src/mega.rs                   | 116 +++++++++++++---------
 crates/mega/src/mega_settings.rs          |  50 ++++++++++
 crates/mega_panel/src/mega_panel.rs       |  66 +++++++++---
 crates/project_panel/Cargo.toml           |   1 +
 crates/project_panel/src/project_panel.rs |  31 ++++++
 crates/zed/src/main.rs                    |   3 +-
 9 files changed, 225 insertions(+), 65 deletions(-)
 create mode 100644 crates/mega/src/mega_settings.rs

diff --git a/Cargo.lock b/Cargo.lock
index 1ffec64d85..c25acea09d 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -6888,10 +6888,13 @@ dependencies = [
 name = "mega"
 version = "0.1.0"
 dependencies = [
- "bytes 0.4.12",
+ "anyhow",
+ "bytes 1.7.2",
  "gpui",
  "reqwest_client",
+ "schemars",
  "serde",
+ "settings",
 ]
 
 [[package]]
@@ -8521,6 +8524,7 @@ dependencies = [
  "gpui",
  "indexmap 1.9.3",
  "language",
+ "mega",
  "menu",
  "pretty_assertions",
  "project",
diff --git a/assets/settings/default.json b/assets/settings/default.json
index 147f80a12b..6ea0fff594 100644
--- a/assets/settings/default.json
+++ b/assets/settings/default.json
@@ -379,6 +379,18 @@
     // Where to dock the mega panel. Can be 'left' or 'right'.
     "dock": "left",
   },
+  "mega": {
+    // Url to communicate with mega
+    "mega_url": "http://localhost:8000",
+    // Url to communicate with fuse
+    "fuse_url": "http://localhost:2725",
+    // Default mount point for fuse
+    "mount_point": "/home/neon/projects",
+    // Path for mega executable
+    "mega_executable": "mega",
+    // Path for fuse executable
+    "fuse_executable": "scorpio"
+  },
   "outline_panel": {
     // Whether to show the outline panel button in the status bar
     "button": true,
diff --git a/crates/mega/Cargo.toml b/crates/mega/Cargo.toml
index 1572c73b90..658ed87476 100644
--- a/crates/mega/Cargo.toml
+++ b/crates/mega/Cargo.toml
@@ -14,6 +14,9 @@ path = 'src/mega.rs'
 [dependencies]
 gpui.workspace = true
 reqwest_client.workspace = true
+settings.workspace = true
 
 serde.workspace = true
-bytes = "0.4.12"
+bytes.workspace = true
+schemars.workspace = true
+anyhow.workspace = true
diff --git a/crates/mega/src/mega.rs b/crates/mega/src/mega.rs
index 4bf4aa27d6..84314de815 100644
--- a/crates/mega/src/mega.rs
+++ b/crates/mega/src/mega.rs
@@ -2,39 +2,46 @@
 // The following requirements should be met:
 // 
 // TODO:
-// 1. Only one daemon on this machine.
+// 1. Only one daemon on this machine. 
+//      This should be both warrantied by this module and scorpio
 // 2. At least one daemon on this machine when zed startup.
 // 3. Complete docs.
+// 4. Add settings for this module
 
 use std::path::{Path, PathBuf};
+use std::sync::Arc;
 use gpui::http_client::{AsyncBody, HttpClient};
-use gpui::{AppContext, Context, EntityId, EventEmitter, ModelContext, WindowContext};
+use gpui::{AppContext, Context, EntityId, EventEmitter, ModelContext, SharedString, WindowContext};
 use reqwest_client::ReqwestClient;
 use serde::Serialize;
+use settings::Settings;
+use crate::mega_settings::MegaSettings;
 
 mod delegate;
 mod fuse;
+mod mega_settings;
 
 pub fn init(cx: &mut AppContext) {
-    // let reservation = cx.reserve_model();
-    // cx.insert_model(reservation, |cx| {
-    //     cx.new_model(|_cx| { Mega::new() })
-    // });
+    Mega::init(cx);
 }
 
 #[derive(Clone, Debug, PartialEq)]
 pub enum Event {
     MegaRunning(bool),
     FuseRunning(bool),
-    FuseMounted(bool),
+    FuseMounted(Option<PathBuf>),
+    FuseCheckout(Option<PathBuf>),
 }
 pub struct Mega {
     mega_running: bool,
     fuse_running: bool,
     fuse_mounted: bool,
     
+    mount_point: Option<PathBuf>,
     checkout_path: Option<PathBuf>,
-    panel_id: Option<EntityId>,
+    
+    mega_url: String,
+    fuse_url: String,
 }
 
 pub struct MegaFuse {}
@@ -43,69 +50,93 @@ impl EventEmitter<Event> for Mega {}
 
 
 impl Mega {
-    pub fn init_settings(cx: &mut AppContext) {
-        
-    }
+    pub fn init_settings(cx: &mut AppContext) { MegaSettings::register(cx); }
     
     pub fn init(cx: &mut AppContext) {
-        // let reservation = cx.reserve_model();
-        // cx.insert_model(reservation, |cx| {
-        //     cx.new_model(|_cx| { Mega::new() })
-        // });
+        Self::init_settings(cx);
     }
     
     pub fn new(cx: &mut AppContext) -> Self {
+        let mount_point = PathBuf::from(MegaSettings::get_global(cx).mount_point.clone());
+        let mega_url = MegaSettings::get_global(cx).mega_url.clone();
+        let fuse_url = MegaSettings::get_global(cx).fuse_url.clone();
+        
         Mega {
             fuse_running: false,
             mega_running: false,
             fuse_mounted: false,
+            
+            mount_point: None,
             checkout_path: None,
-            panel_id: None,
+            
+            mega_url,
+            fuse_url,
         }
     }
-    
+
     pub fn update_status(&mut self, cx: &mut ModelContext<Self>) {
-        if let None = self.panel_id {
-            return;
-        }
+        
+        
         
         cx.notify();
     }
-    
+
     pub fn status(&self) -> (bool, bool, bool) {
         (self.mega_running, self.fuse_running, self.fuse_mounted)
     }
     
-    pub fn toggle_mega(&self, cx: &mut ModelContext<Self>) { todo!() }
+    pub fn toggle_mega(&mut self, cx: &mut ModelContext<Self>) {
+        self.mega_running = !self.mega_running;
+        cx.emit(Event::MegaRunning(self.mega_running));
+    }
     
-    pub fn toggle_fuse(&self, cx: &mut ModelContext<Self>) { 
-        
+    pub fn toggle_fuse(&mut self, cx: &mut ModelContext<Self>) {
+        self.fuse_running = !self.fuse_running;
+        cx.emit(Event::FuseRunning(self.fuse_running));
     }
 
-    pub fn toggle_mount(&self, cx: &mut ModelContext<Self>) {
+    pub fn toggle_mount(&mut self, cx: &mut ModelContext<Self>) {
         // let req_body = delegate::MountRequest {
         //     path: "".parse().unwrap()
         // };
-        
-        cx.spawn(|_this, _cx| async {
+
+        cx.spawn(|this, mut cx| async move {
             let client = ReqwestClient::new();
             let req = client.get(
                 "localhost:2725/api/fs/mount",
                 AsyncBody::empty(),
                 false
             ).await;
+            
+            if let Some(mega) = this.upgrade() {
+                let _ = mega.update(&mut cx, |this, cx| {
+                    if this.fuse_mounted {
+                        this.fuse_mounted = false;
+                    } else {
+                        // FIXME just pretending that we've got something from fuse response
+                        this.fuse_mounted = true;
+                        this.mount_point = Some(PathBuf::from("/home/neon/projects"));
+                    }
+                    cx.emit(Event::FuseMounted(this.mount_point.clone()));
+                });
+            }
         }).detach();
     }
     
-    pub fn checkout_path(&self, cx: &mut ModelContext<Self>) {
-        cx.spawn(|_this, _cx| async {
-            let client = ReqwestClient::new();
-            let req = client.get(
-                "localhost:2725/api/fs/mount",
-                AsyncBody::empty(),
-                false
-            ).await;
-        }).detach();
+    pub fn checkout_path(&mut self, cx: &mut ModelContext<Self>) {
+        // for now, we assume there's only one path being checkout at a time.
+        if self.checkout_path.is_none() {
+            cx.spawn(|_this, _cx| async {
+                let client = ReqwestClient::new();
+                let req = client.get(
+                    "localhost:2725/api/fs/mount",
+                    AsyncBody::empty(),
+                    false
+                ).await;
+            }).detach();
+        }
+        
+        
     }
 
     pub fn get_fuse_config(&self, cx: &mut ModelContext<Self>) {
@@ -128,18 +159,7 @@ impl Mega {
             ).await;
         }).detach();
     }
-
-    pub fn get_fuse_mpoint(&self, cx: &mut ModelContext<Self>) {
-        cx.spawn(|_this, _cx| async {
-            let client = ReqwestClient::new();
-            let req = client.get(
-                "localhost:2725/api/config",
-                AsyncBody::empty(),
-                false
-            ).await;
-        }).detach();
-    }
-
+    
 }
 
 #[cfg(test)]
diff --git a/crates/mega/src/mega_settings.rs b/crates/mega/src/mega_settings.rs
new file mode 100644
index 0000000000..82721208a1
--- /dev/null
+++ b/crates/mega/src/mega_settings.rs
@@ -0,0 +1,50 @@
+use std::path::PathBuf;
+use schemars::JsonSchema;
+use gpui::private::serde_derive::{Deserialize, Serialize};
+use settings::{Settings, SettingsSources};
+
+#[derive(Default, Deserialize, Debug, Clone, PartialEq)]
+pub struct MegaSettings {
+    pub mega_url: String,
+    pub fuse_url: String,
+    pub mount_point: PathBuf,
+    pub mega_executable: PathBuf,
+    pub fuse_executable: PathBuf,
+}
+
+#[derive(Clone, Default, Serialize, Deserialize, JsonSchema, Debug)]
+pub struct MegaSettingsContent {
+    /// Url to communicate with mega
+    ///
+    /// Default: http://localhost:8000
+    pub mega_url: String,
+    /// Url to communicate with fuse
+    ///
+    /// Default: http://localhost:2725
+    pub fuse_url: String,
+    /// Default mount point for fuse
+    ///
+    /// Default: "/" (for now)
+    pub mount_point: PathBuf,
+    /// Path for mega executable
+    ///
+    /// Default: "mega" (for now)
+    pub mega_executable: PathBuf,
+    /// Path for fuse executable
+    ///
+    /// Default: "scorpio" (for now)
+    pub fuse_executable: PathBuf,
+}
+
+impl Settings for MegaSettings {
+    const KEY: Option<&'static str> = Some("mega");
+
+    type FileContent = MegaSettingsContent;
+
+    fn load(
+        sources: SettingsSources<Self::FileContent>,
+        _: &mut gpui::AppContext,
+    ) -> anyhow::Result<Self> {
+        sources.json_merge()
+    }
+}
\ No newline at end of file
diff --git a/crates/mega_panel/src/mega_panel.rs b/crates/mega_panel/src/mega_panel.rs
index 80a26cf4c2..82e6047244 100644
--- a/crates/mega_panel/src/mega_panel.rs
+++ b/crates/mega_panel/src/mega_panel.rs
@@ -1,10 +1,11 @@
+use std::path::PathBuf;
 use crate::mega_panel_settings::{MegaPanelDockPosition, MegaPanelSettings};
 use anyhow::{anyhow, Context};
 use db::kvp::KEY_VALUE_STORE;
 use fs::Fs;
 use gpui::private::serde_derive::{Deserialize, Serialize};
 use gpui::private::serde_json;
-use gpui::{actions, div, Action, AppContext, AssetSource, AsyncWindowContext, Div, ElementId, EventEmitter, FocusHandle, FocusableView, FontWeight, Hsla, InteractiveElement, IntoElement, Model, ParentElement, Pixels, PromptLevel, Render, SharedString, Stateful, StatefulInteractiveElement, Styled, Task, UniformListScrollHandle, View, ViewContext, VisualContext, WeakView, WindowContext};
+use gpui::{actions, div, Action, AppContext, AssetSource, AsyncWindowContext, Div, ElementId, EventEmitter, FocusHandle, FocusableView, FontWeight, InteractiveElement, IntoElement, Model, ParentElement, PathPromptOptions, Pixels, PromptLevel, Render, SharedString, Stateful, StatefulInteractiveElement, Styled, Task, UniformListScrollHandle, View, ViewContext, VisualContext, WeakView, WindowContext};
 use mega::Mega;
 use settings::Settings;
 use std::sync::Arc;
@@ -154,7 +155,7 @@ impl Panel for MegaPanel {
             .then_some(IconName::FileGit)
     }
 
-    fn icon_tooltip(&self, cx: &WindowContext) -> Option<&'static str> {
+    fn icon_tooltip(&self, _cx: &WindowContext) -> Option<&'static str> {
         Some("Mega Panel")
     }
 
@@ -203,6 +204,7 @@ impl MegaPanel {
             let focus_handle = cx.focus_handle();
             cx.on_focus(&focus_handle, Self::focus_in).detach();
 
+            #[allow(unused)]
             cx.subscribe(mega, |this, mega, event, cx| {
                 // TODO: listen for mega events
             }).detach();
@@ -243,16 +245,22 @@ impl MegaPanel {
         }
     }
 
-    pub fn toggle_fuse_mount(&mut self, _: &ToggleFuseMount, cx: &mut ViewContext<Self>) {
-        // let mega = self.mega_handle.upgrade()
-        //     .unwrap_or_else()
-
-        self.warn_unimplemented(cx);
-    }
-
     pub fn checkout_path(&mut self, _: &CheckoutPath, cx: &mut ViewContext<Self>) {
         self.warn_unimplemented(cx);
     }
+    
+    pub fn toggle_fuse_mount(&mut self, _: &ToggleFuseMount, cx: &mut ViewContext<Self>) {
+        // if let Some(workspace) = self.workspace.upgrade() {
+        //     workspace.model.update(cx, |this, mx| {
+        //         
+        //     });
+        // }
+
+        self.mega_handle.update(cx, |this, cx | { 
+            this.toggle_mount(cx);
+            
+        });
+    }
 
     fn render_status(&mut self, cx: &mut ViewContext<Self>) -> Div {
         let (
@@ -283,12 +291,22 @@ impl MegaPanel {
             .id("mega-control-pad")
             .size_full()
             .children([
+                encap_btn(Button::new("btn_toggle_mega", "Toggle Mega")
+                    .full_width()
+                    .icon(IconName::Plus)
+                    .icon_position(IconPosition::Start)
+                    .on_click(cx.listener(|this, _, cx| {
+                        this.mega_handle.update(cx, |mega, cx| mega.toggle_mega(cx));
+                        this.warn_unimplemented(cx);
+                    }))
+                ),
                 encap_btn(Button::new("btn_toggle_scorpio", "Toggle Scorpio")
                     .full_width()
                     .icon(IconName::Plus)
                     .icon_position(IconPosition::Start)
                     .on_click(cx.listener(|this, _, cx| {
                         this.mega_handle.update(cx, |mega, cx| mega.toggle_fuse(cx));
+                        this.warn_unimplemented(cx);
                     }))
                 ),
                 encap_btn(Button::new("btn_toggle_mount", "Toggle Mount")
@@ -297,6 +315,9 @@ impl MegaPanel {
                     .icon_position(IconPosition::Start)
                     .on_click(cx.listener(|this, _, cx| {
                         this.mega_handle.update(cx, |mega, cx| mega.toggle_mount(cx));
+                        
+                        
+                        this.warn_unimplemented(cx);
                     }))
                 ),
                 encap_btn(Button::new("btn_checkout", "Checkout Path")
@@ -304,15 +325,34 @@ impl MegaPanel {
                     .icon(IconName::Check)
                     .icon_position(IconPosition::Start)
                     .on_click(cx.listener(|this, _, cx| {
-                        // TODO: should get the path here
-                        this.mega_handle.update(cx, |mega, cx| mega.checkout_path(cx));
+                        this.warn_unimplemented(cx);
+                        // TODO: should read the path here
+                        let options = PathPromptOptions {
+                            files: true,
+                            directories: true,
+                            multiple: false,
+                        };
+                        
+                        let abs_path = cx.prompt_for_paths(options);
+                        // if let Some(workspace_view) = this.workspace.upgrade() {
+                        //     let mut workspace = workspace_view.read(cx);
+                        //     workspace.open_workspace_for_paths(false, vec![], cx);
+                        // }
+                        cx.spawn(|this, mut cx| async move {
+                            let Ok(Ok(Some(result))) = abs_path.await else {
+                                return;
+                            };
+                            
+                            
+                        }).detach();
+                        // mega.update(cx, |mega, cx| mega.checkout_path(cx));
                     }))
                 ),
             ])
     }
 
     fn status_unit(&self, cx: &mut ViewContext<MegaPanel>, name: &'static str, state: bool) -> Stateful<Div> {
-        let unit_id = ElementId::from(SharedString::from(format!("status_{}", name.clone())));
+        let unit_id = ElementId::from(SharedString::from(format!("status_{}", name)));
         div()
             .text_ui(cx)
             .id(unit_id)
@@ -328,7 +368,7 @@ impl MegaPanel {
     }
 
     fn warn_unimplemented(&self, cx: &mut ViewContext<Self>) {
-        let message = String::from("This operation is not implemented yet");
+        let message = String::from("This operation is not implemented yet, functions may not behave correctly");
         let _ = cx.prompt(PromptLevel::Warning, "Unimplemented", Some(&message), &["Got it"]);
     }
 }
diff --git a/crates/project_panel/Cargo.toml b/crates/project_panel/Cargo.toml
index 11c7364e58..cc9e0ba8f6 100644
--- a/crates/project_panel/Cargo.toml
+++ b/crates/project_panel/Cargo.toml
@@ -21,6 +21,7 @@ file_icons.workspace = true
 indexmap.workspace = true
 git.workspace = true
 gpui.workspace = true
+mega.workspace = true
 menu.workspace = true
 pretty_assertions.workspace = true
 project.workspace = true
diff --git a/crates/project_panel/src/project_panel.rs b/crates/project_panel/src/project_panel.rs
index c4fb39f587..34f3bf0f54 100644
--- a/crates/project_panel/src/project_panel.rs
+++ b/crates/project_panel/src/project_panel.rs
@@ -43,6 +43,7 @@ use std::{
     sync::Arc,
     time::Duration,
 };
+use db::write_and_log;
 use theme::ThemeSettings;
 use ui::{prelude::*, v_flex, ContextMenu, Icon, KeyBinding, Label, ListItem, Tooltip};
 use util::{maybe, ResultExt, TryFutureExt};
@@ -223,6 +224,7 @@ struct DraggedProjectEntryView {
 impl ProjectPanel {
     fn new(workspace: &mut Workspace, cx: &mut ViewContext<Workspace>) -> View<Self> {
         let project = workspace.project().clone();
+        let mega = workspace.mega().clone();
         let project_panel = cx.new_view(|cx: &mut ViewContext<Self>| {
             let focus_handle = cx.focus_handle();
             cx.on_focus(&focus_handle, Self::focus_in).detach();
@@ -282,6 +284,34 @@ impl ProjectPanel {
             )
             .detach();
 
+            cx.subscribe(&mega, |this, mega, mega_event, cx| match mega_event {
+                mega::Event::FuseMounted(Some(path)) => {
+                    let path = path.to_owned();
+                    this.workspace
+                        .update(cx, |workspace, cx| {
+                            cx.spawn(|this, mut cx| async move {
+                                if let Some(task) = this
+                                    .update(&mut cx, |this, cx| {
+                                        this.open_workspace_for_paths(false, vec!(path), cx)
+                                    })
+                                    .log_err()
+                                {
+                                    task.await.log_err();
+                                }
+                            })
+                                .detach()
+                        })
+                        .log_err();
+                        
+                        
+                }
+                mega::Event::FuseCheckout(path) => {
+                    // FIXME: impl it.
+                    println!("Fuse Checkout NOT implemented in project for now!");
+                }
+                _ => {}
+            }).detach();
+
             cx.observe_global::<FileIcons>(|_, cx| {
                 cx.notify();
             })
@@ -491,6 +521,7 @@ impl ProjectPanel {
             entry_id,
         });
 
+        // FIXME add fuse dir specific behaviors
         if let Some((worktree, entry)) = self.selected_sub_entry(cx) {
             let auto_fold_dirs = ProjectPanelSettings::get_global(cx).auto_fold_dirs;
             let is_root = Some(entry) == worktree.root_entry();
diff --git a/crates/zed/src/main.rs b/crates/zed/src/main.rs
index 005d086f48..1e5e9a6ac7 100644
--- a/crates/zed/src/main.rs
+++ b/crates/zed/src/main.rs
@@ -523,10 +523,9 @@ fn main() {
         Client::set_global(client.clone(), cx);
 
         zed::init(cx);
-        mega::init(cx);
         project::Project::init(&client, cx);
         client::init(&client, cx);
-        language::init(cx);
+        mega::init(cx);
         let telemetry = client.telemetry();
         telemetry.start(
             system_id.as_ref().map(|id| id.to_string()),
-- 
2.43.0

