From 69f92bb2dbb1b2facf7b60cb6c6e1c0d211c4f4d Mon Sep 17 00:00:00 2001
From: Neon <yyk1249501542@gmail.com>
Date: Tue, 29 Oct 2024 21:08:56 +0800
Subject: [PATCH 09/14] Fix: dont restore previous workspace

---
 crates/project/src/project.rs             | 106 ++++++++++++++++++++++
 crates/project_panel/src/project_panel.rs |   5 +-
 crates/zed/src/main.rs                    |  85 +++++++++--------
 3 files changed, 155 insertions(+), 41 deletions(-)

diff --git a/crates/project/src/project.rs b/crates/project/src/project.rs
index 6e731e9cba..6795d005d7 100644
--- a/crates/project/src/project.rs
+++ b/crates/project/src/project.rs
@@ -576,6 +576,112 @@ impl Project {
         TaskStore::init(Some(&client));
     }
 
+    pub fn local_new (
+        client: Arc<Client>,
+        node: NodeRuntime,
+        user_store: Model<UserStore>,
+        languages: Arc<LanguageRegistry>,
+        fs: Arc<dyn Fs>,
+        env: Option<HashMap<String, String>>,
+        cx: &mut AppContext,
+    ) -> Model<Self> {
+        cx.new_model(|cx: &mut ModelContext<Self>| {
+            let (tx, rx) = mpsc::unbounded();
+            cx.spawn(move |this, cx| Self::send_buffer_ordered_messages(this, rx, cx))
+                .detach();
+            let snippets = SnippetProvider::new(fs.clone(), BTreeSet::from_iter([]), cx);
+            let worktree_store = cx.new_model(|_| WorktreeStore::local(false, fs.clone()));
+            cx.subscribe(&worktree_store, Self::on_worktree_store_event)
+                .detach();
+
+            let buffer_store = cx.new_model(|cx| BufferStore::local(worktree_store.clone(), cx));
+            cx.subscribe(&buffer_store, Self::on_buffer_store_event)
+                .detach();
+
+            let prettier_store = cx.new_model(|cx| {
+                PrettierStore::new(
+                    node.clone(),
+                    fs.clone(),
+                    languages.clone(),
+                    worktree_store.clone(),
+                    cx,
+                )
+            });
+
+            let environment = ProjectEnvironment::new(&worktree_store, env, cx);
+
+            let task_store = cx.new_model(|cx| {
+                TaskStore::local(
+                    fs.clone(),
+                    buffer_store.downgrade(),
+                    worktree_store.clone(),
+                    environment.clone(),
+                    cx,
+                )
+            });
+
+            let settings_observer = cx.new_model(|cx| {
+                SettingsObserver::new_local(
+                    fs.clone(),
+                    worktree_store.clone(),
+                    task_store.clone(),
+                    cx,
+                )
+            });
+            cx.subscribe(&settings_observer, Self::on_settings_observer_event)
+                .detach();
+
+            let lsp_store = cx.new_model(|cx| {
+                LspStore::new_local(
+                    buffer_store.clone(),
+                    worktree_store.clone(),
+                    prettier_store.clone(),
+                    environment.clone(),
+                    languages.clone(),
+                    client.http_client(),
+                    fs.clone(),
+                    cx,
+                )
+            });
+            cx.subscribe(&lsp_store, Self::on_lsp_store_event).detach();
+
+            Self {
+                buffer_ordered_messages_tx: tx,
+                collaborators: Default::default(),
+                worktree_store,
+                buffer_store,
+                lsp_store,
+                join_project_response_message_id: 0,
+                client_state: ProjectClientState::Local,
+                client_subscriptions: Vec::new(),
+                _subscriptions: vec![cx.on_release(Self::release)],
+                active_entry: None,
+                snippets,
+                languages,
+                client,
+                task_store,
+                user_store,
+                settings_observer,
+                fs,
+                ssh_client: None,
+                buffers_needing_diff: Default::default(),
+                git_diff_debouncer: DebouncedDelay::new(),
+                terminals: Terminals {
+                    local_handles: Vec::new(),
+                },
+                node: Some(node),
+                hosted_project_id: None,
+                dev_server_project_id: None,
+                search_history: Self::new_search_history(),
+                environment,
+                remotely_created_models: Default::default(),
+
+                search_included_history: Self::new_search_history(),
+                search_excluded_history: Self::new_search_history(),
+            }
+        })
+    }
+
     pub fn local(
         client: Arc<Client>,
         node: NodeRuntime,
diff --git a/crates/project_panel/src/project_panel.rs b/crates/project_panel/src/project_panel.rs
index 34f3bf0f54..8b16829834 100644
--- a/crates/project_panel/src/project_panel.rs
+++ b/crates/project_panel/src/project_panel.rs
@@ -286,6 +286,7 @@ impl ProjectPanel {
 
             cx.subscribe(&mega, |this, mega, mega_event, cx| match mega_event {
                 mega::Event::FuseMounted(Some(path)) => {
+                    
                     let path = path.to_owned();
                     this.workspace
                         .update(cx, |workspace, cx| {
@@ -302,8 +303,8 @@ impl ProjectPanel {
                                 .detach()
                         })
                         .log_err();
-                        
-                        
+
+
                 }
                 mega::Event::FuseCheckout(path) => {
                     // FIXME: impl it.
diff --git a/crates/zed/src/main.rs b/crates/zed/src/main.rs
index 1e5e9a6ac7..9df417f3e5 100644
--- a/crates/zed/src/main.rs
+++ b/crates/zed/src/main.rs
@@ -867,49 +867,56 @@ async fn installation_id() -> Result<IdType> {
     Ok(IdType::New(installation_id))
 }
 
+/// **Mega Fuse Integration:** 
+///
+/// This function is used for detect if there is an existing workspace opened
+/// in the last run.
+///
+/// Whenever the case is, create an empty workspace
+/// because fuse dir cannot be warrantied to be available at zed startup.
 async fn restore_or_create_workspace(
     app_state: Arc<AppState>,
     cx: &mut AsyncAppContext,
 ) -> Result<()> {
-    if let Some(locations) = restorable_workspace_locations(cx, &app_state).await {
-        for location in locations {
-            match location {
-                SerializedWorkspaceLocation::Local(location, _) => {
-                    let task = cx.update(|cx| {
-                        workspace::open_paths(
-                            location.paths().as_ref(),
-                            app_state.clone(),
-                            workspace::OpenOptions::default(),
-                            cx,
-                        )
-                    })?;
-                    task.await?;
-                }
-                SerializedWorkspaceLocation::Ssh(ssh_project) => {
-                    let connection_options = SshConnectionOptions {
-                        host: ssh_project.host.clone(),
-                        username: ssh_project.user.clone(),
-                        port: ssh_project.port,
-                        password: None,
-                    };
-                    let app_state = app_state.clone();
-                    cx.spawn(move |mut cx| async move {
-                        recent_projects::open_ssh_project(
-                            connection_options,
-                            ssh_project.paths.into_iter().map(PathBuf::from).collect(),
-                            app_state,
-                            workspace::OpenOptions::default(),
-                            &mut cx,
-                        )
-                        .await
-                        .log_err();
-                    })
-                    .detach();
-                }
-                SerializedWorkspaceLocation::DevServer(_) => {}
-            }
-        }
-    } else if matches!(KEY_VALUE_STORE.read_kvp(FIRST_OPEN), Ok(None)) {
+    // if let Some(locations) = restorable_workspace_locations(cx, &app_state).await {
+    //     for location in locations {
+    //         match location {
+    //             SerializedWorkspaceLocation::Local(location, _) => {
+    //                 let task = cx.update(|cx| {
+    //                     workspace::open_paths(
+    //                         location.paths().as_ref(),
+    //                         app_state.clone(),
+    //                         workspace::OpenOptions::default(),
+    //                         cx,
+    //                     )
+    //                 })?;
+    //                 task.await?;
+    //             }
+    //             SerializedWorkspaceLocation::Ssh(ssh_project) => {
+    //                 let connection_options = SshConnectionOptions {
+    //                     host: ssh_project.host.clone(),
+    //                     username: ssh_project.user.clone(),
+    //                     port: ssh_project.port,
+    //                     password: None,
+    //                 };
+    //                 let app_state = app_state.clone();
+    //                 cx.spawn(move |mut cx| async move {
+    //                     recent_projects::open_ssh_project(
+    //                         connection_options,
+    //                         ssh_project.paths.into_iter().map(PathBuf::from).collect(),
+    //                         app_state,
+    //                         workspace::OpenOptions::default(),
+    //                         &mut cx,
+    //                     )
+    //                     .await
+    //                     .log_err();
+    //                 })
+    //                 .detach();
+    //             }
+    //             SerializedWorkspaceLocation::DevServer(_) => {}
+    //         }
+    //     }
+    if matches!(KEY_VALUE_STORE.read_kvp(FIRST_OPEN), Ok(None)) {
         cx.update(|cx| show_welcome_view(app_state, cx))?.await?;
     } else {
         cx.update(|cx| {
-- 
2.43.0

