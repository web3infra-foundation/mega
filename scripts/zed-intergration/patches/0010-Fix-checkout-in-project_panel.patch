From f2551513e804e8f43f6fac39d58befffd9dcda39 Mon Sep 17 00:00:00 2001
From: Neon <yyk1249501542@gmail.com>
Date: Wed, 30 Oct 2024 10:53:59 +0800
Subject: [PATCH 10/14] Fix checkout in project_panel

---
 crates/mega/src/mega.rs                   | 18 +++++++++-
 crates/mega_panel/src/mega_panel.rs       | 28 +++++++--------
 crates/project_panel/src/project_panel.rs | 44 +++++++++++++++++------
 3 files changed, 63 insertions(+), 27 deletions(-)

diff --git a/crates/mega/src/mega.rs b/crates/mega/src/mega.rs
index 84314de815..c27c40d7f4 100644
--- a/crates/mega/src/mega.rs
+++ b/crates/mega/src/mega.rs
@@ -123,7 +123,7 @@ impl Mega {
         }).detach();
     }
     
-    pub fn checkout_path(&mut self, cx: &mut ModelContext<Self>) {
+    pub fn checkout_path(&mut self, cx: &mut ModelContext<Self>, mut path: PathBuf) {
         // for now, we assume there's only one path being checkout at a time.
         if self.checkout_path.is_none() {
             cx.spawn(|_this, _cx| async {
@@ -137,6 +137,22 @@ impl Mega {
         }
         
         
+    }
+
+    pub fn checkout_multi_path(&mut self, cx: &mut ModelContext<Self>, mut path: Vec<PathBuf>) {
+        // for now, we assume there's only one path being checkout at a time.
+        if self.checkout_path.is_none() {
+            cx.spawn(|_this, _cx| async {
+                let client = ReqwestClient::new();
+                let req = client.get(
+                    "localhost:2725/api/fs/mount",
+                    AsyncBody::empty(),
+                    false
+                ).await;
+            }).detach();
+        }
+
+
     }
 
     pub fn get_fuse_config(&self, cx: &mut ModelContext<Self>) {
diff --git a/crates/mega_panel/src/mega_panel.rs b/crates/mega_panel/src/mega_panel.rs
index 82e6047244..8b141b57fd 100644
--- a/crates/mega_panel/src/mega_panel.rs
+++ b/crates/mega_panel/src/mega_panel.rs
@@ -5,7 +5,7 @@ use db::kvp::KEY_VALUE_STORE;
 use fs::Fs;
 use gpui::private::serde_derive::{Deserialize, Serialize};
 use gpui::private::serde_json;
-use gpui::{actions, div, Action, AppContext, AssetSource, AsyncWindowContext, Div, ElementId, EventEmitter, FocusHandle, FocusableView, FontWeight, InteractiveElement, IntoElement, Model, ParentElement, PathPromptOptions, Pixels, PromptLevel, Render, SharedString, Stateful, StatefulInteractiveElement, Styled, Task, UniformListScrollHandle, View, ViewContext, VisualContext, WeakView, WindowContext};
+use gpui::{actions, div, Action, AppContext, AssetSource, AsyncWindowContext, Div, ElementId, EventEmitter, Flatten, FocusHandle, FocusableView, FontWeight, InteractiveElement, IntoElement, Model, ParentElement, PathPromptOptions, Pixels, PromptLevel, Render, SharedString, Stateful, StatefulInteractiveElement, Styled, Task, UniformListScrollHandle, View, ViewContext, VisualContext, WeakView, WindowContext};
 use mega::Mega;
 use settings::Settings;
 use std::sync::Arc;
@@ -257,6 +257,7 @@ impl MegaPanel {
         // }
 
         self.mega_handle.update(cx, |this, cx | { 
+            // FIXME when there's already a visible worktree, this call will create a new window.
             this.toggle_mount(cx);
             
         });
@@ -315,8 +316,6 @@ impl MegaPanel {
                     .icon_position(IconPosition::Start)
                     .on_click(cx.listener(|this, _, cx| {
                         this.mega_handle.update(cx, |mega, cx| mega.toggle_mount(cx));
-                        
-                        
                         this.warn_unimplemented(cx);
                     }))
                 ),
@@ -326,7 +325,6 @@ impl MegaPanel {
                     .icon_position(IconPosition::Start)
                     .on_click(cx.listener(|this, _, cx| {
                         this.warn_unimplemented(cx);
-                        // TODO: should read the path here
                         let options = PathPromptOptions {
                             files: true,
                             directories: true,
@@ -334,18 +332,18 @@ impl MegaPanel {
                         };
                         
                         let abs_path = cx.prompt_for_paths(options);
-                        // if let Some(workspace_view) = this.workspace.upgrade() {
-                        //     let mut workspace = workspace_view.read(cx);
-                        //     workspace.open_workspace_for_paths(false, vec![], cx);
-                        // }
-                        cx.spawn(|this, mut cx| async move {
-                            let Ok(Ok(Some(result))) = abs_path.await else {
-                                return;
-                            };
-                            
+
+                        // Why so annoying...
+                        let mega = this.mega_handle.clone();
+                        cx.spawn(|this, mut cx|async move {
+                            // mega.update(&mut cx, |this, cx| async move {
+                            //     if let Ok(Ok(Some(result))) = abs_path.await {
+                            //         this.checkout_multi_path(cx, result);
+                            //     }
+                            // }).log_err();
                             
-                        }).detach();
-                        // mega.update(cx, |mega, cx| mega.checkout_path(cx));
+                        }) .detach();
+                        
                     }))
                 ),
             ])
diff --git a/crates/project_panel/src/project_panel.rs b/crates/project_panel/src/project_panel.rs
index 8b16829834..d69d682b8f 100644
--- a/crates/project_panel/src/project_panel.rs
+++ b/crates/project_panel/src/project_panel.rs
@@ -44,6 +44,7 @@ use std::{
     time::Duration,
 };
 use db::write_and_log;
+use mega::Mega;
 use theme::ThemeSettings;
 use ui::{prelude::*, v_flex, ContextMenu, Icon, KeyBinding, Label, ListItem, Tooltip};
 use util::{maybe, ResultExt, TryFutureExt};
@@ -58,7 +59,9 @@ const PROJECT_PANEL_KEY: &str = "ProjectPanel";
 const NEW_ENTRY_ID: ProjectEntryId = ProjectEntryId::MAX;
 
 pub struct ProjectPanel {
+    // TODO: use segment tree to fastly store multiple checkout path,
     project: Model<Project>,
+    mega: Model<Mega>,
     fs: Arc<dyn Fs>,
     scroll_handle: UniformListScrollHandle,
     focus_handle: FocusHandle,
@@ -67,6 +70,7 @@ pub struct ProjectPanel {
     /// Relevant only for auto-fold dirs, where a single project panel entry may actually consist of several
     /// project entries (and all non-leaf nodes are guaranteed to be directories).
     ancestors: HashMap<ProjectEntryId, FoldedAncestors>,
+    checkout_entry_id: Option<ProjectEntryId>,
     last_worktree_root_id: Option<ProjectEntryId>,
     last_external_paths_drag_over_entry: Option<ProjectEntryId>,
     expanded_dir_ids: HashMap<WorktreeId, Vec<ProjectEntryId>>,
@@ -164,6 +168,7 @@ actions!(
         UnfoldDirectory,
         FoldDirectory,
         SelectParent,
+        CheckoutPath,
     ]
 );
 
@@ -303,8 +308,8 @@ impl ProjectPanel {
                                 .detach()
                         })
                         .log_err();
-
-
+                    
+                    this.focus_in(cx);
                 }
                 mega::Event::FuseCheckout(path) => {
                     // FIXME: impl it.
@@ -330,11 +335,13 @@ impl ProjectPanel {
 
             let mut this = Self {
                 project: project.clone(),
+                mega: mega.clone(),
                 fs: workspace.app_state().fs.clone(),
                 scroll_handle: UniformListScrollHandle::new(),
                 focus_handle,
                 visible_entries: Default::default(),
                 ancestors: Default::default(),
+                checkout_entry_id: Default::default(),
                 last_worktree_root_id: Default::default(),
                 last_external_paths_drag_over_entry: None,
                 expanded_dir_ids: Default::default(),
@@ -541,7 +548,10 @@ impl ProjectPanel {
                             menu.action("Search Inside", Box::new(NewSearchInDirectory))
                         })
                     } else {
-                        menu.action("New File", Box::new(NewFile))
+                        menu
+                            .action("Checkout Path", Box::new(CheckoutPath))
+                            .separator()
+                            .action("New File", Box::new(NewFile))
                             .action("New Folder", Box::new(NewDirectory))
                             .separator()
                             .when(is_local && cfg!(target_os = "macos"), |menu| {
@@ -1324,6 +1334,15 @@ impl ProjectPanel {
         }
     }
 
+    fn checkout_specific_path(&mut self, _: &CheckoutPath, cx: &mut ViewContext<Self>) {
+        if let Some((worktree, entry)) = self.selected_entry_handle(cx) {
+            let path = entry.path.clone();
+            self.mega.update(cx, |this, cx| {
+               this.checkout_path(cx, path.to_path_buf()) 
+            });
+        }
+    }
+
     fn autoscroll(&mut self, cx: &mut ViewContext<Self>) {
         if let Some((_, _, index)) = self.selection.and_then(|s| self.index_for_selection(s)) {
             self.scroll_handle.scroll_to_item(index);
@@ -2937,6 +2956,7 @@ impl Render for ProjectPanel {
                 .on_action(cx.listener(Self::new_search_in_directory))
                 .on_action(cx.listener(Self::unfold_directory))
                 .on_action(cx.listener(Self::fold_directory))
+                .on_action(cx.listener(Self::checkout_specific_path))
                 .when(!project.is_read_only(cx), |el| {
                     el.on_action(cx.listener(Self::new_file))
                         .on_action(cx.listener(Self::new_directory))
@@ -3023,14 +3043,16 @@ impl Render for ProjectPanel {
                 .p_4()
                 .track_focus(&self.focus_handle)
                 .child(
-                    Button::new("open_project", "Open a project")
-                        .full_width()
-                        .key_binding(KeyBinding::for_action(&workspace::Open, cx))
-                        .on_click(cx.listener(|this, _, cx| {
-                            this.workspace
-                                .update(cx, |workspace, cx| workspace.open(&workspace::Open, cx))
-                                .log_err();
-                        })),
+                    // Button::new("open_project", "Open a project")
+                    //     .full_width()
+                    //     .key_binding(KeyBinding::for_action(&workspace::Open, cx))
+                    //     .on_click(cx.listener(|this, _, cx| {
+                    //         this.workspace
+                    //             .update(cx, |workspace, cx| workspace.open(&workspace::Open, cx))
+                    //             .log_err();
+                    //     })),
+                    Label::new("Run mega daemon to mount the working directories")
+                        
                 )
                 .drag_over::<ExternalPaths>(|style, _, cx| {
                     style.bg(cx.theme().colors().drop_target_background)
-- 
2.43.0

