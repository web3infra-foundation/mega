//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use chrono::Utc;
use sea_orm::entity::prelude::*;
use sea_orm::{ActiveValue::Set, ConnectionTrait};
use serde::{Deserialize, Serialize};
use serde_json::{Value, json};

use crate::scheduler::BuildRequest;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "builds")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub task_id: Uuid,
    pub exit_code: Option<i32>,
    pub start_at: DateTimeWithTimeZone,
    pub end_at: Option<DateTimeWithTimeZone>,
    pub repo: String,
    pub target: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub args: Option<Value>,
    pub output_file: String,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tasks::Entity",
        from = "Column::TaskId",
        to = "super::tasks::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Tasks,
}

impl Related<super::tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tasks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    /// Create a new build ActiveModel for database insertion
    pub fn create_build(
        task_id: Uuid,
        repo: String,
        target: String,
        args: Option<Value>,
    ) -> ActiveModel {
        let now = Utc::now().into();
        let build_id = Uuid::now_v7();
        ActiveModel {
            id: Set(build_id),
            task_id: Set(task_id),
            exit_code: Set(None),
            start_at: Set(now),
            end_at: Set(None),
            repo: Set(repo),
            target: Set(target),
            args: Set(args),
            output_file: Set(format!("./logs/{}", build_id)),
            created_at: Set(now),
        }
    }

    /// Insert a single build directly into the database
    pub async fn insert_build(
        task_id: Uuid,
        repo: String,
        target: String,
        build: BuildRequest,
        db: &impl ConnectionTrait,
    ) -> Result<Model, DbErr> {
        let build_model = Self::create_build(task_id, repo, target, build.args.map(|a| json!(a)));
        build_model.insert(db).await
    }
}
